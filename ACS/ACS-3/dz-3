.data
	msg_first_operand: .asciz "Введите числитель: "
	msg_second_operand: .asciz "Введите знаменатель: "
	msg_numerator_equals_zero: .asciz "Числитель не может быть равен 0."
	msg_denominator_equals_zero: .asciz "Знаменатель не может быть равен 0."
	msg_quotient: .asciz "Частное от деления равно: "
	msg_remainder: .asciz "Остаток от деления равен: "
	newline: .asciz "\n"
 
.text
.globl main
main:
        # Запрашиваем числитель
        li      a7, 4              
        la      a0, msg_first_operand
        ecall
        
        li a7, 5
        ecall
        
        #  Переносим числитель в регистр t0
        mv t0, a0 
        
        # Запрашиваем знаменатель
        li      a7, 4         
        la      a0, msg_second_operand
        ecall
        
        li a7, 5
        ecall
        
        #  Переносим знаменатель в регистр t1
        mv t1, a0 
        
        # Завершаем программу, если знаменатель = 0 || числитель = 0
        beqz t0, numerator_equals_zero
        beqz t1, denominator_equals_zero
        
        # Кладем в регистр t2 значение 0 (считаем частное числа)
        li t2, 0
        
        # Кладем знак числителя в регистр t3 (<0 - 1, >0 - 0)
        li t3, 0
        
        # Проверяем знак числителя (если он < 0, меняем); иные случаи не влияют на результат (в конце программы знак вернется)
        bltz t0, change_numerator_symbol
        # Проверяем знак числителя (если он < 0, меняем); иные случаи не влияют на результат
        bltz t1, change_denominator_symbol

        # Запускаем цикл
        j division_loop
        
change_numerator_symbol:
	# Меняем знак числителя
	neg t0, t0
	 
	li t3, 1
	 
	j main2
change_denominator_symbol:
	# Меняем знак знаменателя
	neg t1, t1
	 
	li t4, 1
	 
	j main3
main2:
 # Проверяем знак числителя (если он < 0, меняем); иные случаи не влияют на результат
        bltz t1, change_denominator_symbol
        j division_loop
main3:
 	j division_loop
division_loop:
 	# До тех пор пока числитель больше знаменателя вычитаем из него знаменательно
 	bge t0, t1, divide
 
 	# Если числитель был отрицательным при вводе - выводим частное с минусом
 	bnez t3, print_neg_numerator
 	# Иначе просто выводим
 	j print_results
 
divide:
 	# Кладем в числитель значение (числитель - знаменатель)
 	sub t0 t0 t1
 	# Инкрементируем частное (регистр t2)
 	addi t2, t2, 1
 	# Возвращаемся к циклу
 	j division_loop
 
numerator_equals_zero:
 	# Критический случай - числитель = 0 => завершаем программу
        li      a7, 4              
        la      a0, msg_numerator_equals_zero
        ecall
        j exit

denominator_equals_zero:
 	# Критический случай - знаменатель = 0 => завершаем программу
        li      a7, 4              
        la      a0, msg_denominator_equals_zero
        ecall
        j exit
        
print_neg_numerator:
 	bnez t4, print_neg_both

 	# Выводим частное
 	li      a7, 4              
        la      a0, msg_quotient
        ecall
        
        neg t2, t2
 	li a7, 1
 	mv a0, t2
 	ecall
 
 	# Новая строка
 	li      a7, 4              
        la      a0, newline
        ecall
 
 	# Выводим остаток
 	li      a7, 4              
        la      a0, msg_remainder
        ecall
        
        neg t0, t0
 	li a7, 1
 	mv a0, t0
 	ecall
 
 	# Завершаем программу
 	j exit
        
print_neg_both:

 	# Выводим частное
 	li      a7, 4              
        la      a0, msg_quotient
        ecall
        
 	li a7, 1
 	mv a0, t2
 	ecall
 
 	# Новая строка
 	li      a7, 4              
        la      a0, newline
        ecall
 
 	# Выводим остаток
 	li      a7, 4              
        la      a0, msg_remainder
        ecall
        
        neg t0, t0
 	li a7, 1
 	mv a0, t0
 	ecall
 
 	# Завершаем программу
 	j exit
 		       
print_results:
# Выводим частное
 	li      a7, 4              
        la      a0, msg_quotient
        ecall
        
 	li a7, 1
 	mv a0, t2
 	ecall
 
 	# Новая строка
 	li      a7, 4              
        la      a0, newline
        ecall
 
 	# Выводим остаток
 	li      a7, 4              
        la      a0, msg_remainder
        ecall
        
 	li a7, 1
 	mv a0, t0
 	ecall
 
	# Завершаем программу
 	j exit
 
exit:
 	#  Завершение программы
        li      a7, 10
        ecall